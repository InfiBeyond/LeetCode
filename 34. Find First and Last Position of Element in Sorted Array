/*
34. Find First and Last Position of Element in Sorted Array
Medium

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
*/

class Solution {
public:
  vector<int> searchRange(vector<int>& nums, int target) {
    return {firstPos(nums, target), lastPos(nums, target)};
  }
private:
  int firstPos(const vector<int>& nums, int target) {
    int l = 0;
    int r = nums.size();
    while (l < r) {
      int m = l + (r - l) / 2;      
      if (nums[m] >= target) {
        r = m;
      } else {
        l = m + 1;
      }
    }
    
    if (l == nums.size() || nums[l] != target) return -1;
    return l;    
  }
 
  int lastPos(const vector<int>& nums, int target) {
    int l = 0;
    int r = nums.size();
    while (l < r) {
      int m = l + (r - l) / 2;      
      if (nums[m] > target) {
        r = m;
      } else {
        l = m + 1;
      }
    }
    // l points to the first element this is greater than target.
    --l;        
    if (l < 0 || nums[l] != target) return -1;
    return l;
  }
};
