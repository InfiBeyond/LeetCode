2016 S4
Quesition:
Problem S4: Combining Riceballs
Problem Description
Alphonse has N rice balls of various sizes in a row. He wants to form the largest rice ball possible
for his friend to eat. Alphonse can perform the following operations:
• If two adjacent rice balls have the same size, Alphonse can combine them to make a new
rice ball. The new rice ball’s size is the sum of the two old rice balls’ sizes. It occupies the
position in the row previously occupied by the two old rice balls.
• If two rice balls have the same size, and there is exactly one rice ball between them,
Alphonse can combine all three rice balls to make a new rice ball. (The middle rice ball
does not need to have the same size as the other two.) The new rice ball’s size is the sum of
the three old rice balls’ sizes. It occupies the position in the row previously occupied by the
three old rice balls.
Alphonse can perform each operation as many times as he wants.
Determine the size of the largest rice ball in the row after performing 0 or more operations.
Input Specification
The first line will contain the integer, N (1 ≤ N ≤ 400).
The next line will contain N space separated integers representing the sizes of the riceballs, in
order from left to right. Each integer is at least 1 and at most 1 000 000.
• For 1 of the 15 available marks, N = 4.
• For an additional 2 of the 15 available marks, N ≤ 10.
• For an additional 5 of the 15 available marks, N ≤ 50.
Output Specification
Output the size of the largest riceball Alphonse can form.
Sample Input 1
7
47 12 12 3 9 9 3
Output for Sample Input
48
Explanation for Output for Sample Input 1
One possible set of moves to create a riceball of size 48 is to combine 12 and 12, forming a riceball
9
of size 24. Then, combine 9 and 9 to form a riceball of size 18. Then, combine 3, 18 and 3 to form
a riceball of size 24. Finally, combine the two riceballs of size 24 to form a riceball of size 48.
Sample Input 2
4
1 2 3 1
Output for Sample Input 2
3
Explanation for Output for Sample Input 2
There are no moves to make, thus the largest riceball in the row is size 3.

My Code:
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
    int num;
    cin >> num;
    vector<int> rice;
    int temp;
    for(int i = 0; i< num; i++)
    {
        cin >> temp;
        rice.emplace_back(temp);
    }
    int change = 0;
    int chain = 0;
    for(int i = 0; i > -1; i++)
    {
        for(int j = 0; j < num; j++)
        {
            for(int k = 1; k < num-j; k++)
            {
                if(rice[j] == rice [j+k])
                {
                    chain++;
                }
                else
                {
                    k = num-j;
                }
            }
            if(chain != 0)
            {
                for(int m = 1; m <= chain; m++)
                {
                    rice[j] = rice[j] + rice[j+1];
                    rice.erase(rice.begin()+j+1, rice.begin()+j+2);
                    change = 1;
                    if(m == chain)
                    {
                        num -= chain;
                        change = 1;
                        chain = 0;
                        j=-1;
                        continue;
                    }
                }
            }
            if(j < num-2)
            {
                if (rice[j] == rice[j+2])
                {
                    rice[j] = rice[j] + rice[j+1] + rice[j+2];
                    rice.erase(rice.begin()+j+1, rice.begin()+j+3);
                    change = 1;
                    j=-1;
                    num-=2;
                    continue;
                }
            }
        }
        if(change == 0)
            {break;}
        change = 0;
    }
    sort(rice.begin(),rice.end());
    cout << rice.back() << endl;
    return 0;
}


Problamatic test case:
input:
10
1 2 1 2 1 2 1 2 1 2
supposed output:
14
my output:
13
Need to let the vector ignore the first "1" in order to get 14; BUT i got no idea how to do that.
My Rough Idea is that we need to write a function that reads in the vector and "looks ahead" to test is output can be larger if they ignore the first n numbers.

