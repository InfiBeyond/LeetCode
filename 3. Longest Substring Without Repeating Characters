/*
3. Longest Substring Without Repeating Characters
Medium

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
          if(s.length()==1)
      return 1;
   if (s.length()==0)
       return 0;
   vector<char> vt;
    bool found=false;
    int prevcount, count,j,i;
           
    for (i=0;i<s.length();i++)
    {
       if(vt.size()==0)
       {
           vt.push_back(s[i]);
           count=vt.size();
       }
        else 
        {
            found=false;
            for (j=0;j<vt.size();j++)
            {
                if (s[i]==vt[j])
                {
                    found=true;
                    if(prevcount<count)
                       prevcount=count;  
                    if(j==vt.size()-1)
                       vt.clear();
                    else
                    {
                       vt.erase(vt.begin(),vt.begin()+j+1);
                    
                    }
                    vt.push_back(s[i]);
                    
                    break;
                }
            }
            if(found==false)
            {
                vt.push_back(s[i]);
                count=vt.size();
            }
        }
    
        
    }
   return prevcount>count?prevcount:count;
    }
};
